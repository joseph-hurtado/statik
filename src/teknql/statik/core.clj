(ns teknql.statik.core
  (:require [garden.core :as garden]
            [hiccup.core :as hiccup]
            [pathetic.core :as path]
            [clojure.java.io :as io]
            [sci.core :as sci])
  (:refer-clojure :exclude [compile]))

(defn compile-html
  "Compiles the provided hiccup-style HTML"
  [html]
  (hiccup/html html))

(defn compile-css
  "Compiles the provided garden-style CSS"
  [css]
  (garden/css css))

(defn compile
  "Takes a sequence of assets and optional `data`.

  Returns an output map of relative file paths to the respective file content.

  If `:data` on any of the assets is an arity 1 function, will pass the value
  of `data` into the functions."
  ([assets] (compile assets nil))
  ([assets data]
   (reduce
    (fn compile-asset [acc asset]
      (let [asset-data (:data asset)
            compile-fn (case (:type asset)
                         :html compile-html
                         :css  compile-css)]
        (assoc acc (:path asset) (compile-fn asset-data))))
    {}
    assets)))

(defn write!
  "Takes an output map (as generated by `compile`) and writes it the the proided `out-dir`"
  [output-map out-dir]
  (doseq [[path content] output-map]
    (let [out-path (path/normalize (str out-dir "/" path))]
      (io/make-parents out-path)
      (spit out-path content))))

(def def-asset ^:sci/macro
  (fn [&env &form name data]
    `(do (~'register-asset! ~data)
         (~'def ~name ~data))))

(defn asset-path
  "Returns the asset path of the provided symbol"
  [sym]
  (:path sym))

(defn stylesheet
  "Returns a hiccup link tag for including a css stylesheet for the proided asset"
  [asset]
  [:link {:rel  "stylesheet"
          :type "text/css"
          :href (asset-path asset)}])

(defn eval-string
  "Ealuates the provided string. Returns a list of assets defined by the file."
  [s]
  (let [assets (atom [])]
    (sci/eval-string
     s
     {:bindings {'def-asset       def-asset
                 'asset-path      asset-path
                 'stylesheet      stylesheet
                 'register-asset! #(swap! assets conj %)}})
    @assets))
